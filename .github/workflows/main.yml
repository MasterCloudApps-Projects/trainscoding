name: Main workflow

on:
  push:
    branches: [ main ]
    paths:
      - "packages/**"
      - "services/**"
  workflow_dispatch:

jobs:

  publish:
    name: Pubish last release candidate if tests pass
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: trainscoding
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      GITHUB_REPOSITORY: $(echo ${{ github.repository }} | awk '{print tolower($0)}')


    steps:
    - name: Clone repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Download latest release candidate Docker image
      run: docker pull $DOCKER_USER/$IMAGE_NAME:rc

    - name: Run tests againts recently downloaded docker image
      run: |
        docker run -d -p 8080:8080 $DOCKER_USER/$IMAGE_NAME:rc
        mvn -B -Dport=8080 test

    - name: Login to GitHub Docker Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Re-tag definitive production version and publish to Docker Github registry
      run: |
        IMAGE_VERSION=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout | sed 's/\.[^.]*$//')
        GITHUB_REPOSITORY=$(echo ${{ github.repository }} | awk '{print tolower($0)}')
        docker tag $DOCKER_USER/$IMAGE_NAME:rc docker.pkg.github.com/$GITHUB_REPOSITORY/$IMAGE_NAME:$IMAGE_VERSION
        docker image push --all-tags docker.pkg.github.com/$GITHUB_REPOSITORY/$IMAGE_NAME

    - name: Login to DockerHub
      run: docker login -u $DOCKER_USER -p "${{ secrets.DOCKERHUB_TOKEN }}"

    - name: Re-tag definitive production version and publish to DockerHub registry
      run: |
        IMAGE_VERSION=$(mvn -q help:evaluate -Dexpression=project.version -DforceStdout | sed 's/\.[^.]*$//')
        docker tag $DOCKER_USER/$IMAGE_NAME:rc $DOCKER_USER/$IMAGE_NAME:$IMAGE_VERSION
        docker image push --all-tags $DOCKER_USER/$IMAGE_NAME
